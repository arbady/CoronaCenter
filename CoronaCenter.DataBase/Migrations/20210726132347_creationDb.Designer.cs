// <auto-generated />
using System;
using CoronaCenter.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoronaCenter.DataBase.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210726132347_creationDb")]
    partial class creationDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CenterVaccine", b =>
                {
                    b.Property<int>("CentersId")
                        .HasColumnType("int");

                    b.Property<int>("VaccinesId")
                        .HasColumnType("int");

                    b.HasKey("CentersId", "VaccinesId");

                    b.HasIndex("VaccinesId");

                    b.ToTable("CenterVaccine");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Province")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Rixensart",
                            Number = "10",
                            Province = 0,
                            Street = "Rue de la paix",
                            ZipCode = 1040
                        },
                        new
                        {
                            Id = 2,
                            City = "Mons",
                            Number = "8",
                            Province = 1,
                            Street = "Rue de l'Espinette",
                            ZipCode = 7000
                        },
                        new
                        {
                            Id = 3,
                            City = "Charleroi",
                            Number = "5 Bis",
                            Province = 1,
                            Street = "Rue des Oiseaux",
                            ZipCode = 6000
                        },
                        new
                        {
                            Id = 4,
                            City = "Liège",
                            Number = "1",
                            Province = 2,
                            Street = "Rue de la peur",
                            ZipCode = 4000
                        },
                        new
                        {
                            Id = 5,
                            City = "Namur",
                            Number = "121",
                            Province = 4,
                            Street = "Rue du bonheur",
                            ZipCode = 5000
                        },
                        new
                        {
                            Id = 6,
                            City = "Frameries",
                            Number = "2/3",
                            Province = 1,
                            Street = "Clos des Ormes",
                            ZipCode = 7080
                        },
                        new
                        {
                            Id = 7,
                            City = "Colfontaine",
                            Number = "14A",
                            Province = 1,
                            Street = "Cité de l'Abbaye",
                            ZipCode = 7340
                        },
                        new
                        {
                            Id = 8,
                            City = "Saint-Ghislain",
                            Number = "53",
                            Province = 1,
                            Street = "Cité des pétetites préelles",
                            ZipCode = 7330
                        },
                        new
                        {
                            Id = 9,
                            City = "Tournai",
                            Number = "13",
                            Province = 1,
                            Street = "Cité des anges",
                            ZipCode = 7500
                        },
                        new
                        {
                            Id = 10,
                            City = "Huy",
                            Number = "57",
                            Province = 2,
                            Street = "Rue Simone de Bondue",
                            ZipCode = 4500
                        },
                        new
                        {
                            Id = 11,
                            City = "Diant",
                            Number = "83",
                            Province = 4,
                            Street = "Impasse des maraichers",
                            ZipCode = 5500
                        },
                        new
                        {
                            Id = 12,
                            City = "BoitsFort",
                            Number = "106c",
                            Province = 0,
                            Street = "Rue Grande",
                            ZipCode = 1170
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateVacc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("HoursVacc")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("PatientId");

                    b.HasIndex("VaccineId");

                    b.ToTable("Appointment");

                    b.HasCheckConstraint("DateVacc", "[DateVacc] >= GetDate()");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            DateVacc = new DateTime(2021, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursVacc = new DateTime(2021, 10, 9, 12, 15, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            VaccineId = 1
                        },
                        new
                        {
                            Id = 2,
                            CenterId = 1,
                            DateVacc = new DateTime(2021, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HoursVacc = new DateTime(2021, 10, 9, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 2,
                            VaccineId = 2
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("ResponsibleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ResponsibleId")
                        .IsUnique();

                    b.ToTable("Center");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 9,
                            Name = "CV Numero1",
                            ResponsibleId = 1
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 10,
                            Name = "CV Numero2",
                            ResponsibleId = 2
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 11,
                            Name = "CV Numero3",
                            ResponsibleId = 3
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 12,
                            Name = "CV Numero4",
                            ResponsibleId = 4
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Lot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VaccineId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("VaccineId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Lot");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CenterId = 1,
                            DateIn = new DateTime(2021, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 3000,
                            VaccineId = 1,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CenterId = 2,
                            DateIn = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 1000,
                            VaccineId = 2,
                            WarehouseId = 2
                        },
                        new
                        {
                            Id = 3,
                            CenterId = 3,
                            DateIn = new DateTime(2021, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 1500,
                            VaccineId = 3,
                            WarehouseId = 3
                        },
                        new
                        {
                            Id = 4,
                            CenterId = 4,
                            DateIn = new DateTime(2021, 9, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Quantity = 4200,
                            VaccineId = 4,
                            WarehouseId = 4
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.LotOut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LotId");

                    b.ToTable("LotOut");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Maker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Maker");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "BioNTech"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Oxford"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Moderna"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Johnson & Johnson"
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.MedicalStaff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InamiNumber")
                        .IsRequired()
                        .HasColumnType("CHAR(11)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InamiNumber")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("MedicalStaff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            InamiNumber = "12345678911",
                            StaffId = 1
                        },
                        new
                        {
                            Id = 2,
                            InamiNumber = "12345678912",
                            StaffId = 2
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("Date")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("MedicalIndication")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("NISS")
                        .IsRequired()
                        .HasColumnType("CHAR(13)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("NISS")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            DateOfBirth = new DateTime(1986, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalIndication = "Test",
                            NISS = "86043058162",
                            PhoneNumber = "0466423930",
                            UserId = 5
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            DateOfBirth = new DateTime(1982, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalIndication = "Test2",
                            NISS = "86043058163",
                            PhoneNumber = "0466423932",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseHours")
                        .HasColumnType("datetime2");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<DateTime>("OpenHours")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<bool>("Risponsible")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 0,
                            Risponsible = true,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Grade = 1,
                            Risponsible = false,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Grade = 2,
                            Risponsible = false,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Grade = 2,
                            Risponsible = false,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("VARBINARY(32)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("CHAR(36)");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PatientId");

                    b.HasIndex("StaffId");

                    b.ToTable("UserProfile");

                    b.HasCheckConstraint("CK_Email", "Email LIKE '__%@__%.%'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "arnoldmpoyi@yahoo.fr",
                            FirstName = "Arnold",
                            LastName = "Mpoyi",
                            Password = new byte[] { 136, 217, 103, 250, 126, 163, 94, 0, 89, 219, 32, 202, 23, 252, 179, 201, 227, 203, 128, 123, 143, 52, 173, 147, 243, 240, 137, 133, 255, 184, 144, 212 },
                            Salt = "881238e6-30d7-4162-b912-9de7be9c1b95"
                        },
                        new
                        {
                            Id = 2,
                            Email = "cocodeblock@gmail.com",
                            FirstName = "Corentin",
                            LastName = "De Block",
                            Password = new byte[] { 208, 109, 60, 231, 115, 238, 72, 166, 216, 66, 34, 112, 82, 242, 111, 13, 124, 38, 67, 237, 254, 40, 215, 35, 92, 142, 172, 186, 24, 244, 222, 171 },
                            Salt = "be1f7698-90e1-48cd-a38a-9365be7cc75e"
                        },
                        new
                        {
                            Id = 3,
                            Email = "IsaSkou@yahoo.com",
                            FirstName = "Isabel",
                            LastName = "Skou",
                            Password = new byte[] { 207, 157, 222, 62, 187, 165, 27, 250, 76, 94, 123, 129, 142, 185, 8, 175, 122, 161, 115, 224, 17, 243, 125, 139, 28, 137, 163, 151, 155, 202, 158, 166 },
                            Salt = "01fcd12f-1144-4a97-9b57-c97108d10693"
                        },
                        new
                        {
                            Id = 4,
                            Email = "badispace@gmail.com",
                            FirstName = "Steve",
                            LastName = "Buanga",
                            Password = new byte[] { 47, 225, 190, 182, 193, 137, 228, 114, 90, 117, 141, 118, 218, 19, 154, 52, 30, 141, 251, 188, 208, 53, 43, 23, 226, 104, 54, 231, 175, 251, 32, 116 },
                            Salt = "93fe1f77-bc87-4275-bbf4-43024353b407"
                        },
                        new
                        {
                            Id = 5,
                            Email = "tototata@gmail.com",
                            FirstName = "Toto",
                            LastName = "Tata",
                            Password = new byte[] { 207, 61, 191, 34, 27, 232, 57, 146, 167, 169, 174, 165, 137, 103, 183, 86, 87, 105, 33, 194, 31, 37, 111, 200, 70, 147, 45, 27, 156, 38, 57, 13 },
                            Salt = "6ebdde99-b5bf-460b-bef0-8e68b6a43162"
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Vaccination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LotId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalStaffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("LotId");

                    b.HasIndex("MedicalStaffId");

                    b.ToTable("Vaccination");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            LotId = 1,
                            MedicalStaffId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            LotId = 1,
                            MedicalStaffId = 2
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Vaccine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MakerId")
                        .HasColumnType("int");

                    b.Property<int?>("MakerId1")
                        .HasColumnType("int");

                    b.Property<int>("MaxInterval")
                        .HasColumnType("int");

                    b.Property<int>("MinInterval")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("MakerId");

                    b.HasIndex("MakerId1");

                    b.ToTable("Vaccine");

                    b.HasCheckConstraint("CK_MinInterval", "MinInterval <= MaxInterval");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MakerId = 1,
                            MaxInterval = 2,
                            MinInterval = 1,
                            Name = "Pfizer"
                        },
                        new
                        {
                            Id = 2,
                            MakerId = 2,
                            MaxInterval = 2,
                            MinInterval = 1,
                            Name = "AstraZeneca"
                        },
                        new
                        {
                            Id = 3,
                            MakerId = 3,
                            MaxInterval = 2,
                            MinInterval = 1,
                            Name = "Moderna"
                        },
                        new
                        {
                            Id = 4,
                            MakerId = 4,
                            MaxInterval = 2,
                            MinInterval = 1,
                            Name = "Johnson & Johnson"
                        });
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 5,
                            Name = "Entrepot Numero1"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 6,
                            Name = "Entrepot Numero2"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 7,
                            Name = "Entrepot Numero3"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 8,
                            Name = "Entrepot Numero4"
                        });
                });

            modelBuilder.Entity("CenterVaccine", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Center", null)
                        .WithMany()
                        .HasForeignKey("CentersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Vaccine", null)
                        .WithMany()
                        .HasForeignKey("VaccinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Appointment", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Center", "Center")
                        .WithMany("Appointments")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Vaccine", "Vaccine")
                        .WithMany("Appointments")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Patient");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Center", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Center", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Staff", "Responsible")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Center", "ResponsibleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Lot", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Center", "Center")
                        .WithMany("Lots")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Vaccine", "Vaccine")
                        .WithMany("Lots")
                        .HasForeignKey("VaccineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Warehouse", "Warehouse")
                        .WithMany("Lots")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Vaccine");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.LotOut", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Lot", "Lot")
                        .WithMany("Lot_Outs")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lot");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.MedicalStaff", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Patient", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Patient", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.UserProfile", "User")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Schedule", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Center", "Center")
                        .WithMany("Schedules")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Staff", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Center", "Center")
                        .WithMany("Staffs")
                        .HasForeignKey("CenterId");

                    b.HasOne("CoronaCenter.Model.Entities.UserProfile", "User")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.UserProfile", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("CoronaCenter.Model.Entities.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId");

                    b.Navigation("Patient");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Vaccination", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Appointment", "Appointment")
                        .WithMany("Vaccinations")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Lot", "Lot")
                        .WithMany("Vaccinations")
                        .HasForeignKey("LotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.MedicalStaff", "MedicalStaff")
                        .WithMany("Vaccinations")
                        .HasForeignKey("MedicalStaffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Lot");

                    b.Navigation("MedicalStaff");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Vaccine", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Maker", "Maker")
                        .WithMany()
                        .HasForeignKey("MakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoronaCenter.Model.Entities.Maker", null)
                        .WithMany("Vaccines")
                        .HasForeignKey("MakerId1");

                    b.Navigation("Maker");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Warehouse", b =>
                {
                    b.HasOne("CoronaCenter.Model.Entities.Address", "Address")
                        .WithOne()
                        .HasForeignKey("CoronaCenter.Model.Entities.Warehouse", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Appointment", b =>
                {
                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Center", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Lots");

                    b.Navigation("Schedules");

                    b.Navigation("Staffs");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Lot", b =>
                {
                    b.Navigation("Lot_Outs");

                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Maker", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.MedicalStaff", b =>
                {
                    b.Navigation("Vaccinations");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Vaccine", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Lots");
                });

            modelBuilder.Entity("CoronaCenter.Model.Entities.Warehouse", b =>
                {
                    b.Navigation("Lots");
                });
#pragma warning restore 612, 618
        }
    }
}
